{"version":3,"sources":["hooks/boardroom/useClaimRewardTimerBoardroom.ts","hooks/boardroom/useClaimRewardCheck.ts","views/Boardroom/components/ProgressCountdown.tsx","hooks/useHarvestFromBoardroom.ts","hooks/useEarningsOnBoardroom.ts","views/Boardroom/components/Harvest.tsx","hooks/boardroom/useWithdrawCheck.ts","views/Boardroom/components/DepositModal.tsx","views/Boardroom/components/WithdrawModal.tsx","hooks/useStakedBalanceOnBoardroom.ts","hooks/boardroom/useUnstakeTimerBoardroom.ts","hooks/useStakeToBoardroom.ts","hooks/useWithdrawFromBoardroom.ts","views/Boardroom/components/Stake.tsx","hooks/useRedeemOnBoardroom.ts","hooks/useCurrentEpoch.ts","hooks/useFetchBoardroomAPR.ts","hooks/useCashPriceInEstimatedTWAP.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useTotalStakedOnBoardroom.ts","views/Boardroom/Boardroom.js","hooks/useHandleTransactionReceipt.ts","hooks/useApprove.ts","components/CardIcon/CardIcon.tsx","components/UnlockWallet/UnlockWallet.tsx","assets/img/background.jpg","components/Value/Value.tsx","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","components/Spacer/Spacer.tsx","hooks/useStakedTokenPriceInDollars.ts"],"names":["useClaimRewardTimerBoardroom","useState","from","Date","to","time","setTime","bombFinance","useBombFinance","useEffect","getUserClaimRewardTime","then","useClaimRewardCheck","slowRefresh","useRefresh","canClaimReward","setCanClaimReward","isUnlocked","a","canUserClaimRewardFromBoardroom","console","error","canUserClaimReward","StyledCountdown","styled","p","props","theme","color","grey","StyledProgressOuter","div","StyledProgress","progress","StyledCardContentInner","spacing","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","key","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromBoardroom","handleTransactionReceipt","useHandleTransactionReceipt","onReward","useCallback","harvestCashFromBoardroom","useEarningsOnBoardroom","BigNumber","balance","setBalance","getEarningsOnBoardroom","fetchBalance","StyledCardHeader","StyledCardActions","Harvest","bombStats","useBombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","CardIcon","TokenSymbol","symbol","Value","value","Label","text","variant","Button","onClick","className","eq","disabled","mt","style","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromBoardroom","canUserWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","useStakedBalanceOnBoardroom","getStakedSharesOnBoardroom","useUnstakeTimerBoardroom","getUserUnstakeTime","useStakeToBoardroom","onStake","amount","stakeShareToBoardroom","useWithdrawFromBoardroom","onWithdraw","withdrawShareFromBoardroom","StyledActionSpacer","Stake","useApprove","BSHARE","contracts","Boardroom","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","toString","canWithdrawFromBoardroom","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","NOT_APPROVED","marginTop","IconButton","useRedeemOnBoardroom","onRedeem","alertDesc","exitFromBoardroom","useCurrentEpoch","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useFetchBoardroomAPR","apr","setApr","getBoardroomAPR","fetchBoardroomAPR","useCashPriceInEstimatedTWAP","stat","setStat","getBombStatInEstimatedTWAP","fetchCashPrice","useTreasuryAllocationTimes","getTreasuryNextAllocationTime","useTotalStakedOnBoardroom","totalStaked","setTotalStaked","getTotalStakedInBoardroom","fetchTotalStaked","BackgroundImage","createGlobalStyle","HomeImage","useStyles","makeStyles","gridItem","height","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","classes","account","useWallet","cashStat","boardroomAPR","scalingFactor","Page","Helmet","align","gutterBottom","Grid","container","justify","item","xs","md","lg","textTransform","moment","toDate","width","Alert","severity","href","Spacer","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","tx","catch","err","message","includes","toLowerCase","slice","stack","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","PENDING","UNKNOWN","response","approval","tokenAddress","StyledCardIcon","children","position","top","left","transform","AccountButton","module","exports","StyledValue","StyledIcon","Icon","AddIcon","themeColor","useContext","ThemeContext","viewBox","d","fill","RemoveIcon","StyledButton","button","undefined","StyledLink","Link","StyledSpacer","size","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval"],"mappings":"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","file":"static/js/16.438678bf.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport useBombFinance from '../useBombFinance';\r\nimport {AllocationTime} from '../../bomb-finance/types';\r\n\r\nconst useClaimRewardTimerBoardroom = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const bombFinance = useBombFinance();\r\n\r\n  useEffect(() => {\r\n    if (bombFinance) {\r\n      bombFinance.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [bombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerBoardroom;\r\n","import {useEffect, useState} from 'react';\r\nimport useRefresh from '../useRefresh';\r\nimport useBombFinance from '../useBombFinance';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const {slowRefresh} = useRefresh();\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const bombFinance = useBombFinance();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserClaimReward() {\r\n      try {\r\n        setCanClaimReward(await bombFinance.canUserClaimRewardFromBoardroom());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserClaimReward();\r\n    }\r\n  }, [isUnlocked, slowRefresh, bombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, {CountdownRenderProps} from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({base, deadline, hideBar, description}) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const {days, hours, minutes, seconds} = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{progress: number}>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import {useCallback} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromBoardroom = () => {\r\n  const bombFinance = useBombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(bombFinance.harvestCashFromBoardroom(), 'Claim BOMB from Boardroom');\r\n  }, [bombFinance, handleTransactionReceipt]);\r\n\r\n  return {onReward: handleReward};\r\n};\r\n\r\nexport default useHarvestFromBoardroom;\r\n","import {useEffect, useState} from 'react';\r\nimport {BigNumber} from 'ethers';\r\nimport useBombFinance from './useBombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnBoardroom = () => {\r\n  const {slowRefresh} = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const bombFinance = useBombFinance();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await bombFinance.getEarningsOnBoardroom());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, bombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnBoardroom;\r\n","import React, {useMemo} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {Box, Button, Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerBoardroom from '../../../hooks/boardroom/useClaimRewardTimerBoardroom';\r\nimport useClaimRewardCheck from '../../../hooks/boardroom/useClaimRewardCheck';\r\nimport ProgressCountdown from './ProgressCountdown';\r\nimport useHarvestFromBoardroom from '../../../hooks/useHarvestFromBoardroom';\r\nimport useEarningsOnBoardroom from '../../../hooks/useEarningsOnBoardroom';\r\nimport useBombStats from '../../../hooks/useBombStats';\r\nimport {getDisplayBalance} from '../../../utils/formatBalance';\r\n\r\nconst Harvest: React.FC = () => {\r\n  const bombStats = useBombStats();\r\n  const {onReward} = useHarvestFromBoardroom();\r\n  const earnings = useEarningsOnBoardroom();\r\n  const canClaimReward = useClaimRewardCheck();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (bombStats ? Number(bombStats.priceInDollars).toFixed(2) : null),\r\n    [bombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const {from, to} = useClaimRewardTimerBoardroom();\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"BOMB\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(earnings)} />\r\n              <Label text={`≈ $${earnedInDollars}`} variant=\"yellow\" />\r\n              <Label text=\"BOMB Earned\" variant=\"yellow\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                className={earnings.eq(0) || !canClaimReward ? 'shinyButtonDisabled' : 'shinyButton'}\r\n                disabled={earnings.eq(0) || !canClaimReward}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{color: '#FFF'}}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{textAlign: 'center'}}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from '../useBombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const bombFinance = useBombFinance();\r\n  const {slowRefresh} = useRefresh();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await bombFinance.canUserUnstakeFromBoardroom());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, bombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, {useCallback, useMemo, useState} from 'react';\r\n\r\nimport {Button} from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, {ModalProps} from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport {getFullDisplayBalance} from '../../../utils/formatBalance';\r\nimport {BigNumber} from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({max, onConfirm, onDismiss, tokenName = ''}) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, {useCallback, useMemo, useState} from 'react';\r\n\r\nimport {Button} from '@material-ui/core';\r\nimport Modal, {ModalProps} from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport {getFullDisplayBalance} from '../../../utils/formatBalance';\r\nimport {BigNumber} from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({onConfirm, onDismiss, max, tokenName = ''}) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import {useEffect, useState} from 'react';\r\nimport {BigNumber} from 'ethers';\r\nimport useBombFinance from './useBombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnBoardroom = () => {\r\n  const {slowRefresh} = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const bombFinance = useBombFinance();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await bombFinance.getStakedSharesOnBoardroom());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, bombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnBoardroom;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from '../useBombFinance';\r\nimport {AllocationTime} from '../../bomb-finance/types';\r\n\r\nconst useUnstakeTimerBoardroom = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const bombFinance = useBombFinance();\r\n\r\n  useEffect(() => {\r\n    if (bombFinance) {\r\n      bombFinance.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [bombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerBoardroom;\r\n","import {useCallback} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToBoardroom = () => {\r\n  const bombFinance = useBombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(bombFinance.stakeShareToBoardroom(amount), `Stake ${amount} BSHARE to the boardroom`);\r\n    },\r\n    [bombFinance, handleTransactionReceipt],\r\n  );\r\n  return {onStake: handleStake};\r\n};\r\n\r\nexport default useStakeToBoardroom;\r\n","import {useCallback} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromBoardroom = () => {\r\n  const bombFinance = useBombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        bombFinance.withdrawShareFromBoardroom(amount),\r\n        `Withdraw ${amount} BSHARE from the boardroom`,\r\n      );\r\n    },\r\n    [bombFinance, handleTransactionReceipt],\r\n  );\r\n  return {onWithdraw: handleWithdraw};\r\n};\r\n\r\nexport default useWithdrawFromBoardroom;\r\n","import React, {useMemo} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {Box, Button, Card, CardContent, Typography} from '@material-ui/core';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport {AddIcon, RemoveIcon} from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, {ApprovalState} from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/boardroom/useWithdrawCheck';\r\n\r\nimport {getDisplayBalance} from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useBombFinance from '../../../hooks/useBombFinance';\r\nimport ProgressCountdown from './ProgressCountdown';\r\nimport useStakedBalanceOnBoardroom from '../../../hooks/useStakedBalanceOnBoardroom';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerBoardroom from '../../../hooks/boardroom/useUnstakeTimerBoardroom';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToBoardroom from '../../../hooks/useStakeToBoardroom';\r\nimport useWithdrawFromBoardroom from '../../../hooks/useWithdrawFromBoardroom';\r\n\r\nconst Stake: React.FC = () => {\r\n  const bombFinance = useBombFinance();\r\n  const [approveStatus, approve] = useApprove(bombFinance.BSHARE, bombFinance.contracts.Boardroom.address);\r\n\r\n  const tokenBalance = useTokenBalance(bombFinance.BSHARE);\r\n  const stakedBalance = useStakedBalanceOnBoardroom();\r\n  const {from, to} = useUnstakeTimerBoardroom();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('BSHARE', bombFinance.BSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const {onStake} = useStakeToBoardroom();\r\n  const {onWithdraw} = useWithdrawFromBoardroom();\r\n  const canWithdrawFromBoardroom = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'BShare'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={'BShare'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <CardIcon>\r\n                <TokenSymbol symbol=\"BSHARE\" />\r\n              </CardIcon>\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n              <Label text={`≈ $${tokenPriceInDollars}`} variant=\"yellow\" />\r\n              <Label text={'BSHARE Staked'} variant=\"yellow\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  className={approveStatus === ApprovalState.NOT_APPROVED ? 'shinyButton' : 'shinyButtonDisabled'}\r\n                  style={{marginTop: '20px'}}\r\n                  onClick={approve}\r\n                >\r\n                  Approve BSHARE\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <IconButton disabled={!canWithdrawFromBoardroom} onClick={onPresentWithdraw}>\r\n                    <RemoveIcon color={!canWithdrawFromBoardroom ? '' : 'yellow'} />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon color={!canWithdrawFromBoardroom ? '' : 'yellow'} />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{color: '#FFF'}}>\r\n        {canWithdrawFromBoardroom ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{textAlign: 'center'}}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import {useCallback} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnBoardroom = (description?: string) => {\r\n  const bombFinance = useBombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem BSHARE from Boardroom';\r\n    handleTransactionReceipt(bombFinance.exitFromBoardroom(), alertDesc);\r\n  }, [bombFinance, description, handleTransactionReceipt]);\r\n  return {onRedeem: handleRedeem};\r\n};\r\n\r\nexport default useRedeemOnBoardroom;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport {BigNumber} from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const bombFinance = useBombFinance();\r\n  const {slowRefresh} = useRefresh();\r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch() {\r\n      try {\r\n        setCurrentEpoch(await bombFinance.getCurrentEpoch());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, bombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchBoardroomAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const bombFinance = useBombFinance();\r\n  const {slowRefresh} = useRefresh();\r\n\r\n  useEffect(() => {\r\n    async function fetchBoardroomAPR() {\r\n      try {\r\n        setApr(await bombFinance.getBoardroomAPR());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchBoardroomAPR();\r\n  }, [setApr, bombFinance, slowRefresh]);\r\n\r\n  return apr;\r\n};\r\n\r\nexport default useFetchBoardroomAPR;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport {TokenStat} from '../bomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCashPriceInEstimatedTWAP = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const bombFinance = useBombFinance();\r\n  const {slowRefresh} = useRefresh();\r\n\r\n  useEffect(() => {\r\n    async function fetchCashPrice() {\r\n      try {\r\n        setStat(await bombFinance.getBombStatInEstimatedTWAP());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCashPrice();\r\n  }, [setStat, bombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useCashPriceInEstimatedTWAP;\r\n","import {useEffect, useState} from 'react';\r\nimport useBombFinance from './useBombFinance';\r\nimport {AllocationTime} from '../bomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const {slowRefresh} = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const bombFinance = useBombFinance();\r\n  useEffect(() => {\r\n    if (bombFinance) {\r\n      bombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [bombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import {useEffect, useState} from 'react';\r\nimport {BigNumber} from 'ethers';\r\nimport useBombFinance from './useBombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnBoardroom = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const bombFinance = useBombFinance();\r\n  const {slowRefresh} = useRefresh();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await bombFinance.getTotalStakedInBoardroom());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, bombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnBoardroom;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@material-ui/core';\r\n\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnBoardroom from '../../hooks/useRedeemOnBoardroom';\r\nimport useStakedBalanceOnBoardroom from '../../hooks/useStakedBalanceOnBoardroom';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchBoardroomAPR from '../../hooks/useFetchBoardroomAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalStakedOnBoardroom from '../../hooks/useTotalStakedOnBoardroom';\r\nimport useClaimRewardCheck from '../../hooks/boardroom/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/boardroom/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport HomeImage from '../../assets/img/background.jpg';\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background: url(${HomeImage}) repeat !important;\r\n    background-size: cover !important;\r\n    background-color: #171923;\r\n  }\r\n`;\r\nconst TITLE = 'bomb.money | Boardroom'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Boardroom = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnBoardroom();\r\n  const stakedBalance = useStakedBalanceOnBoardroom();\r\n  const currentEpoch = useCurrentEpoch();\r\n  const cashStat = useCashPriceInEstimatedTWAP();\r\n  const totalStaked = useTotalStakedOnBoardroom();\r\n  const boardroomAPR = useFetchBoardroomAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      <Helmet>\r\n        <title>{TITLE}</title>\r\n      </Helmet>\r\n      {!!account ? (\r\n        <>\r\n          <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n            Boardroom\r\n          </Typography>\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent style={{ textAlign: 'center' }}>\r\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>\r\n                      BOMB PEG <small>(TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{scalingFactor} BTC</Typography>\r\n                    <Typography>\r\n                      <small>per 10,000 BOMB</small>\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>APR</Typography>\r\n                    <Typography>{boardroomAPR.toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography style={{ textTransform: 'uppercase', color: '#f9d749' }}>BSHARES Staked</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justify=\"center\">\r\n              <Box mt={3} style={{ width: '600px' }}>\r\n                <Alert variant=\"filled\" severity=\"info\">\r\n                  <h2> Let's Maintain PEG Together! </h2>\r\n                  <a href=\"https://app.bomb.money/xbomb\">xBOMB</a> is a great place to put your BOMB rewards\r\n                  , 20% of all minted BOMB goes directly to xBOMB stakers.<br /><br />\r\n                  Please consider putting your earned BOMB into xBOMB, especially when we are not over 1.1 peg.\r\n                </Alert>\r\n\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justify=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3} mt={10}>\r\n              <Button\r\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\r\n                onClick={onRedeem}\r\n                className={\r\n                  stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)\r\n                    ? 'shinyButtonDisabledSecondary'\r\n                    : 'shinyButtonSecondary'\r\n                }\r\n              >\r\n                Claim &amp; Withdraw\r\n              </Button>\r\n            </Grid>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page >\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Boardroom;\r\n","import {useCallback} from 'react';\r\nimport {TransactionResponse} from '@ethersproject/providers';\r\nimport {useTransactionAdder} from '../state/transactions/hooks';\r\nimport {useAddPopup} from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, {summary}))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({error: {message, stack: err.message || err.stack}});\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import {BigNumber, ethers} from 'ethers';\r\nimport {useCallback, useMemo} from 'react';\r\nimport {useHasPendingApproval, useTransactionAdder} from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../bomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({children}) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: #363746;\r\n  font-size: 36px;\r\n  height: 95px;\r\n  width: 95px;\r\n  border-radius: 95px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import React from 'react';\r\nimport {Box} from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","module.exports = __webpack_public_path__ + \"static/media/background.3761c6a5.jpg\";","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({value}) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({children}) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, {useContext} from 'react';\r\nimport {ThemeContext} from 'styled-components';\r\n\r\nimport Icon, {IconProps} from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({color}) => {\r\n  const {color: themeColor} = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, {useContext} from 'react';\r\nimport {ThemeContext} from 'styled-components';\r\n\r\nimport Icon, {IconProps} from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({color}) => {\r\n  const {color: themeColor} = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({children, disabled, onClick, to}) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\n// background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\r\n// color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  border: 2px solid;\r\n  border-radius: 28px;\r\n  background-color: #171923;\r\n  box-shadow: ${(props) => ('0px 0px 5px 0px ' + !props.disabled ? 'rgba(251,221,76,1)' : 'grey' )};\r\n  color: ${(props) => (!props.disabled ? '#f9d749' : 'grey')};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n\r\n  &:hover {\r\n    background-color: #f9d749;\r\n    color: #171923;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","import React, {useContext} from 'react';\r\nimport styled, {ThemeContext} from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({size = 'md'}) => {\r\n  const {spacing} = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import {useCallback, useEffect, useState} from 'react';\r\n\r\nimport useBombFinance from './useBombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../bomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const bombFinance = useBombFinance();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await bombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, bombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, bombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n"],"sourceRoot":""}