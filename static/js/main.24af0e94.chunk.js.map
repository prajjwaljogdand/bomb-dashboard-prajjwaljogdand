{"version":3,"sources":["state/application/hooks.ts","utils/provider.ts","bomb-finance/ERC20.ts","bomb-finance/BombFinance.ts","contexts/BombFinanceProvider/BombFinanceProvider.tsx","utils/formatBalance.ts","hooks/useBombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","config.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","state/application/actions.ts","bomb-finance/config.ts","bomb-finance/ether-utils.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","state/transactions/actions.ts"],"names":["useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","provider","getDefaultProvider","ethers","providers","Web3Provider","web3ProviderFrom","config","defaultProvider","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","BombFinance","cfg","myAccount","signer","contracts","externalTokens","boardroomVersionOfUser","BOMBBTCB_LP","BOMB","BSHARE","BBOND","XBOMB","BNB","BTC","BOMB_BORROWABLE","BTCB_BORROWABLE","BBOMB_BOMB","BBOMB_BTCB","BBOMBBOMB","BBOMBBTCB","deployments","Object","entries","deployment","abi","Bomb","BShare","BBond","xBOMB","BombBorrowable","BtcbBorrowable","IBombBorrowableABI","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchBoardroomVersionOfUser","then","version","catch","err","error","stack","BombRewardPool","BombGenesisRewardPool","bombRewardPoolSupply","bombRewardPoolSupply2","bombCirculatingSupply","sub","getTokenPriceFromPancakeswapBTC","priceInBTC","getBTCBPriceFromPancakeswap","priceOfOneBTC","priceOfBombInDollars","tokenInFtm","toString","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isBomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","liquidity","priceOfOne","totalLiquidity","btcAmountBN","btcAmount","Treasury","getBombStat","bombStat","getBondPremiumRate","bondBombRatioBN","modifier","bondPriceInBNB","priceOfBBondInDollars","displayedTotalSupply","BShareRewardPool","getTokenPriceFromPancakeswap","priceInBNB","tShareCirculatingSupply","getWBNBPriceFromPancakeswap","priceOfOneBNB","priceOfSharesInDollars","Oracle","twap","utils","parseEther","expectedPrice","getBombUpdatedPrice","getBurnableBombLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","bombToken","xbombToken","getXbombExchange","xbombExchange","xbombPercent","xbombPercentTotal","startDate","Date","nowDate","now","difference","getTime","aprPerDay","contractName","endsWith","tSharePerSecond","rewardPerSecond","div","poolStartTime","startDateTime","toNumber","epochBombPerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getApeLPTokenPrice","epoch","getBombPrice","treasuryBombPrice","buyBonds","decimalToBalance","priceForBomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","BSHAREPrice","BOMBPrice","currentBoardroom","boardroomtShareBalanceOf","bombStakeBalanceOf","boardroomTVL","bombTVL","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingBOMB","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Boardroom","tokenContract","ready","WBNB","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","btcb","priceForPeg","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","BTCB","btcPriceInBNB","wbnbPrice","btcprice","latestSnapshotIndex","boardroomHistory","lastHistory","lastRewardsReceived","amountOfRewardsPerDay","realAPR","xBombBombBalanceOf","canClaimReward","canWithdraw","getStakedSharesOnBoardroom","stakedAmount","notStaked","result","isOldBoardroomMember","Error","stake","Xbomb","enter","BombRouter","expiry","redeem","mint","getShareOf","bomb","bbombBomb","totalBalance","totalBomb","totalBtcb","getExchangeRate","XbombExchange","xBombPerBomb","parseFloat","xBombRate","parseUnits","leave","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","members","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","decimals","image","bombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryBoardroomFundedFilter","BoardroomFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","boardroomFundEvents","events","forEach","index","push","boardroomFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","length","lpName","zapper","BNB_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","BOMB_TICKER","estimateZapInToken","zapIn","zapInToken","bbondAmount","BShareSwapper","swapBBondToBShare","estimateAmountOfBShare","estimateBN","getBShareBalance","bshareBalanceBN","getBBondBalance","bbondBalanceBN","getBShareAmountPerBomb","rateBSharePerBombBN","bshareBalance","bbondBalance","rateBSharePerBomb","Context","createContext","bombFinance","BombFinanceProvider","children","useState","setBombFinance","useEffect","unlockWallet","Provider","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","useBombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","configurations","development","networkName","ftmscanUrl","require","SBTC","SUSD","SVL","CAKE","ZOO","SHIBA","baseLaunchDate","bondLaunchesAt","boardroomLaunchesAt","refreshInterval","production","BombSBTCRewardPool","sectionInUI","closedForStaking","BombSUSDRewardPool","BshareBnbLPBShareRewardPool","BombBtcbLPBShareRewardPool","BombBshareLPBShareRewardPool","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","endpoint","ethConfig","assign","includes","Web3","WebsocketProvider","HttpProvider","timeout","d","String","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","yellow","primary","light","main","secondary","white","newNavy","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Home","lazy","DashBoard","Farm","Bond","Supply","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","BSHARE_TICKER","BTC_TICKER","ZAPPER_ROUTER_ADDR"],"mappings":"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","file":"static/js/main.24af0e94.chunk.js","sourcesContent":["import {useCallback, useMemo} from 'react';\r\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu} from './actions';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {AppState} from '../index';\r\nimport {useWallet} from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const {chainId} = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({content, key}));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({key}));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import {ethers} from 'ethers';\r\nimport config from '../config';\r\nimport {web3ProviderFrom} from '../bomb-finance/ether-utils';\r\n\r\nlet provider: ethers.providers.Web3Provider = null;\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  if (!provider) {\r\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n  }\r\n\r\n  return provider;\r\n}\r\n","import {BigNumber, Contract} from 'ethers';\r\nimport {Signer} from '@ethersproject/abstract-signer';\r\nimport {Provider} from '@ethersproject/abstract-provider';\r\nimport {TransactionResponse} from '@ethersproject/providers';\r\nimport {formatUnits} from 'ethers/lib/utils';\r\n\r\nclass ERC20 {\r\n  private contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    this.contract = new Contract(address, ABI, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      {internalType: 'string', name: 'name', type: 'string'},\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\r\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\r\nimport { Fetcher, Route, Token } from '@pancakeswap/sdk';\r\nimport { Configuration } from './config';\r\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, BShareSwapperStat } from './types';\r\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport IBombBorrowableABI from './IBombBorrowable.abi.json';\r\n\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { BNB_TICKER, SPOOKY_ROUTER_ADDR, BOMB_TICKER } from '../utils/constants';\r\n/**\r\n * An API module of Bomb Money contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class BombFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  boardroomVersionOfUser?: string;\r\n\r\n  BOMBBTCB_LP: Contract;\r\n  BOMB: ERC20;\r\n  BSHARE: ERC20;\r\n  BBOND: ERC20;\r\n  XBOMB: ERC20;\r\n  BNB: ERC20;\r\n  BTC: ERC20;\r\n  BOMB_BORROWABLE: Contract;\r\n  BTCB_BORROWABLE: Contract;\r\n  BBOMB_BOMB: ERC20;\r\n  BBOMB_BTCB: ERC20;\r\n  BBOMBBOMB: ERC20;\r\n  BBOMBBTCB: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.BOMB = new ERC20(deployments.Bomb.address, provider, 'BOMB');\r\n    this.BSHARE = new ERC20(deployments.BShare.address, provider, 'BSHARE');\r\n    this.BBOND = new ERC20(deployments.BBond.address, provider, 'BBOND');\r\n    this.BNB = this.externalTokens['WBNB'];\r\n    this.BTC = this.externalTokens['BTCB'];\r\n    this.XBOMB = new ERC20(deployments.xBOMB.address, provider, 'XBOMB');\r\n    // this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\r\n    // this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\r\n\r\n    // this.BBOMB_BOMB = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\r\n    // this.BBOMB_BTCB = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\r\n    this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\r\n    this.BBOMBBOMB = this.externalTokens['BBOMB-BOMB'];\r\n    this.BBOMBBTCB = this.externalTokens['BBOMB-BTCB'];\r\n\r\n    this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\r\n    this.BOMB_BORROWABLE = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\r\n    this.BTCB_BORROWABLE = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\r\n\r\n    // Uniswap V2 Pair\r\n\r\n    this.BOMBBTCB_LP = new Contract(externalTokens['BOMB-BTCB-LP'][0], IUniswapV2PairABI, provider);\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.BOMB, this.BSHARE, this.BBOND, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.BOMBBTCB_LP = this.BOMBBTCB_LP.connect(this.signer);\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchBoardroomVersionOfUser()\r\n      .then((version) => (this.boardroomVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\r\n        this.boardroomVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM APE TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getBombStat(): Promise<TokenStat> {\r\n    const { BombRewardPool, BombGenesisRewardPool } = this.contracts;\r\n    const supply = await this.BOMB.totalSupply();\r\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombGenesisRewardPool.address);\r\n    const bombRewardPoolSupply2 = await this.BOMB.balanceOf(BombRewardPool.address);\r\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply).sub(bombRewardPoolSupply2);\r\n    //  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BOMB);\r\n    //const priceInBNBstring = priceInBNB.toString();\r\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.BOMB);\r\n    // const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\r\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\r\n    //const priceInDollars = await this.getTokenPriceFromPancakeswapBOMBUSD();\r\n    const priceOfBombInDollars = ((Number(priceInBTC) * Number(priceOfOneBTC)) / 10000).toFixed(2);\r\n    //console.log('priceOfBombInDollars', priceOfBombInDollars);\r\n\r\n    return {\r\n      //  tokenInFtm: (Number(priceInBNB) * 100).toString(),\r\n      tokenInFtm: priceInBTC.toString(),\r\n      priceInDollars: priceOfBombInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBTCPriceUSD(): Promise<Number> {\r\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\r\n    return Number(priceOfOneBTC);\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    console.log('NAME', name);\r\n\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\r\n    //console.log('NAME', name);\r\n    const isBomb = name.startsWith('BOMB');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const ftmAmountBN = await this.BNB.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  async getLPStatBTC(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\r\n    const isBomb = name.startsWith('BOMB');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const btcAmountBN = await this.BTC.balanceOf(lpToken.address);\r\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\r\n\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(5).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n  /**\r\n   * Use this method to get price for Bomb\r\n   * @returns TokenStat for BBOND\r\n   * priceInBNB\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const bombStat = await this.getBombStat();\r\n    const bondBombRatioBN = await Treasury.getBondPremiumRate();\r\n    const modifier = bondBombRatioBN / 1e14 > 1 ? bondBombRatioBN / 1e14 : 1;\r\n    const bondPriceInBNB = (Number(bombStat.tokenInFtm) * modifier).toFixed(4);\r\n    const priceOfBBondInDollars = (Number(bombStat.priceInDollars) * modifier).toFixed(4);\r\n    const supply = await this.BBOND.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInBNB,\r\n      priceInDollars: priceOfBBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for BSHARE\r\n   * priceInBNB\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const { BShareRewardPool } = this.contracts;\r\n\r\n    const supply = await this.BSHARE.totalSupply();\r\n\r\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BSHARE);\r\n    const bombRewardPoolSupply = await this.BSHARE.balanceOf(BShareRewardPool.address);\r\n    const tShareCirculatingSupply = supply.sub(bombRewardPoolSupply);\r\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInBNB) * Number(priceOfOneBNB)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInBNB,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.BSHARE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.BSHARE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { Oracle, BombRewardPool } = this.contracts;\r\n    const expectedPrice = await Oracle.twap(this.BOMB.address, ethers.utils.parseEther('10000'));\r\n\r\n    const supply = await this.BOMB.totalSupply();\r\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombRewardPool.address);\r\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getBombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBombUpdatedPrice();\r\n  }\r\n\r\n  // async getBombPegTWAP(): Promise<any> {\r\n  //   const { Treasury } = this.contracts;\r\n  //   const updatedPrice = Treasury.getBombUpdatedPrice();\r\n  //   const updatedPrice2 = updatedPrice * 10000;\r\n  //   return updatedPrice2;\r\n  // }\r\n\r\n  async getBondsPurchasable(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    // const burnableBomb = (Number(Treasury.getBurnableBombLeft()) * 1000).toFixed(2).toString();\r\n    return Treasury.getBurnableBombLeft();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const stat = bank.earnTokenName === 'BOMB' ? await this.getBombStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  async getXbombAPR(): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const bombToken = this.BOMB;\r\n    const xbombToken = this.XBOMB;\r\n\r\n    const xbombExchange = await this.getXbombExchange();\r\n    const xbombPercent = await xbombExchange;\r\n    const xbombPercentTotal = (Number(xbombPercent) / 1000000000000000000) * 100 - 100;\r\n\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bombToken.symbol, bombToken);\r\n\r\n    const stakeInPool = await bombToken.balanceOf(xbombToken.address);\r\n\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, bombToken.decimal));\r\n\r\n    const startDate = new Date('January 24, 2022');\r\n    const nowDate = new Date(Date.now());\r\n    const difference = nowDate.getTime() - startDate.getTime();\r\n    const days = difference / 60 / 60 / 24 / 1000;\r\n    const aprPerDay = xbombPercentTotal / days;\r\n\r\n    // Determine days between now and a date\r\n\r\n    // const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    // const totalRewardPricePerYear =\r\n    //   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    // const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    // const totalStakingTokenInPool =\r\n    //   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    // const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    // const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n\r\n    const dailyAPR = aprPerDay;\r\n    const yearlyAPR = aprPerDay * 365;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n  ) {\r\n    if (earnTokenName === 'BOMB') {\r\n      if (!contractName.endsWith('BombRewardPool')) {\r\n        const rewardPerSecond = await poolContract.tSharePerSecond();\r\n        if (depositTokenName === 'WBNB') {\r\n          return rewardPerSecond.mul(6000).div(11000).div(24);\r\n        } else if (depositTokenName === 'CAKE') {\r\n          return rewardPerSecond.mul(2500).div(11000).div(24);\r\n        } else if (depositTokenName === 'SUSD') {\r\n          return rewardPerSecond.mul(1000).div(11000).div(24);\r\n        } else if (depositTokenName === 'SVL') {\r\n          return rewardPerSecond.mul(1500).div(11000).div(24);\r\n        }\r\n        return rewardPerSecond.div(24);\r\n      }\r\n      const poolStartTime = await poolContract.poolStartTime();\r\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\r\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\r\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\r\n        return await poolContract.epochBombPerSecond(1);\r\n      }\r\n      return await poolContract.epochBombPerSecond(0);\r\n    }\r\n    const rewardPerSecond = await poolContract.tSharePerSecond();\r\n    if (depositTokenName.startsWith('BOMB-BTCB')) {\r\n      return rewardPerSecond.mul(41650).div(59500);\r\n    } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\r\n      return rewardPerSecond.mul(0).div(59500);\r\n    } else {\r\n      return rewardPerSecond.mul(17850).div(59500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\r\n    if (tokenName === 'WBNB') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else {\r\n      if (tokenName === 'BOMB-BTCB-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\r\n      } else if (tokenName === 'BSHARE-BNB-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\r\n      } else if (tokenName === 'BOMB-BSHARE-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\r\n      } else if (tokenName === 'BSHARE-BNB-APELP') {\r\n        tokenPrice = await this.getApeLPTokenPrice(token, this.BSHARE, false);\r\n      } else if (tokenName === 'BOMB-BTCB-APELP') {\r\n        tokenPrice = await this.getApeLPTokenPrice(token, this.BOMB, true);\r\n      } else {\r\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\r\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n      }\r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryBombPrice = await Treasury.getBombPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryBombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForBomb = await Treasury.getBombPrice();\r\n\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForBomb);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\r\n\r\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(this.currentBoardroom().address);\r\n    const bombStakeBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\r\n\r\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\r\n    const bombTVL = Number(getDisplayBalance(bombStakeBalanceOf, this.BOMB.decimal)) * Number(BOMBPrice);\r\n\r\n    return totalValue + boardroomTVL + bombTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\r\n   * @param isBomb sanity check for usage of bomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\r\n   * @param isBomb sanity check for usage of bomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getApeLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'BOMB') {\r\n        return await pool.pendingBOMB(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchBoardroomVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentBoardroom(): Contract {\r\n    if (!this.boardroomVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Boardroom;\r\n  }\r\n\r\n  isOldBoardroomMember(): boolean {\r\n    return this.boardroomVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    const { WBNB } = this.config.externalTokens;\r\n\r\n    const wftm = new Token(56, WBNB[0], WBNB[1], 'WBNB');\r\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    // const {WBNB} = this.config.externalTokens;\r\n\r\n    // const wbnb = new Token(56, WBNB[0], WBNB[1]);\r\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\r\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n      //   console.log('priceInBUSDBTC', priceInBUSD.midPrice.toFixed(12));\r\n\r\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\r\n      return priceForPeg.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswapBOMBUSD(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    //const { chainId } = this.config;\r\n    //const {WBNB} = this.config.externalTokens;\r\n\r\n    //  const wbnb = new Token(56, WBNB[0], WBNB[1]);\r\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\r\n    const token = new Token(56, this.BOMB.address, this.BOMB.decimal, this.BOMB.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n      // console.log('test', priceInBUSD.midPrice.toFixed(12));\r\n\r\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\r\n      return priceForPeg.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${this.BOMB.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { chainId } = this.config;\r\n\r\n  //   const { WBNB } = this.externalTokens;\r\n\r\n  //   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\r\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n  //   try {\r\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\r\n  //     const liquidityToken = wftmToToken.liquidityToken;\r\n  //     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\r\n  //     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\r\n  //     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\r\n  //     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\r\n  //     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\r\n  //     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\r\n  //     return priceOfShiba.toString();\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { WBNB, FUSDT } = this.externalTokens;\r\n    try {\r\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-BNB-LP'];\r\n      let ftm_amount_BN = await WBNB.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WBNB.decimal));\r\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\r\n      return (fusdt_amount / ftm_amount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WBNB: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { BTCB } = this.externalTokens;\r\n    try {\r\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BTCB);\r\n\r\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\r\n\r\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\r\n      //console.log('btcprice', btcprice);\r\n      return btcprice;\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getBTCBPriceFromPancakeswap(): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { BTCB, FUSDT } = this.externalTokens;\r\n  //   try {\r\n  //     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\r\n  //     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\r\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\r\n  //     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\r\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\r\n  //     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\r\n  //     return (fusdt_amount / ftm_amount).toString();\r\n  //     console.log('BTCB price');\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of BTCB: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getBoardroomAPR() {\r\n    const Boardroom = this.currentBoardroom();\r\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\r\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\r\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(Boardroom.address);\r\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  async getBombStakeAPR() {\r\n    const Boardroom = this.currentBoardroom();\r\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\r\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\r\n    const xBombBombBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\r\n    const bombTVL = Number(getDisplayBalance(xBombBombBalanceOf, this.XBOMB.decimal)) * Number(BOMBPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100 * 0.2) / bombTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\r\n    const Boardroom = this.currentBoardroom();\r\n    return await Boardroom.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\r\n    const Boardroom = this.currentBoardroom();\r\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.BSHARE.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\r\n    // const Boardroom = this.currentBoardroom();\r\n    // const mason = await Boardroom.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\r\n    const Boardroom = this.currentBoardroom();\r\n    return await Boardroom.totalSupply();\r\n  }\r\n\r\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldBoardroomMember()) {\r\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the BSHARE again.\");\r\n    }\r\n    const Boardroom = this.currentBoardroom();\r\n    return await Boardroom.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async stakeToBomb(amount: string): Promise<TransactionResponse> {\r\n    const Xbomb = this.contracts.xBOMB;\r\n    return await Xbomb.enter(decimalToBalance(amount));\r\n  }\r\n\r\n  async redeemFromBomb(amount: string): Promise<TransactionResponse> {\r\n    const BombRouter = this.contracts.BombRouter;\r\n    const expiry = new Date(Date.now() + 2880);\r\n    return await BombRouter.redeem(\r\n      this.BBOMB_BOMB.address,\r\n      decimalToBalance(amount),\r\n      this.myAccount,\r\n      expiry.getTime(),\r\n      '0x',\r\n    );\r\n  }\r\n\r\n  async redeemFromBtcb(amount: string): Promise<TransactionResponse> {\r\n    const BombRouter = this.contracts.BombRouter;\r\n    const expiry = new Date(Date.now() + 2880);\r\n    return await BombRouter.redeem(\r\n      this.BBOMB_BTCB.address,\r\n      decimalToBalance(amount),\r\n      this.myAccount,\r\n      expiry.getTime(),\r\n      '0x',\r\n    );\r\n  }\r\n  async supplyToBtcb(amount: string): Promise<TransactionResponse> {\r\n    const BombRouter = this.contracts.BombRouter;\r\n    const expiry = new Date(Date.now() + 2880);\r\n    return await BombRouter.mint(this.BBOMB_BTCB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\r\n  }\r\n\r\n  async supplyToBomb(amount: string): Promise<TransactionResponse> {\r\n    const BombRouter = this.contracts.BombRouter;\r\n    const expiry = new Date(Date.now() + 2880);\r\n    return await BombRouter.mint(this.BBOMB_BOMB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\r\n  }\r\n\r\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\r\n    const Boardroom = this.currentBoardroom();\r\n    if (this.boardroomVersionOfUser === 'v1') {\r\n      return await Boardroom.getShareOf(this.myAccount);\r\n    }\r\n    return await Boardroom.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getStakedBomb(): Promise<BigNumber> {\r\n    const Xbomb = this.contracts.xBOMB;\r\n    return await Xbomb.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getTotalStakedBomb(): Promise<BigNumber> {\r\n    const Xbomb = this.contracts.xBOMB;\r\n    const bomb = this.BOMB;\r\n    return await bomb.balanceOf(Xbomb.address);\r\n  }\r\n\r\n  async getTotalSuppliedBomb(): Promise<BigNumber> {\r\n    const bbombBomb = this.BOMB_BORROWABLE;\r\n    // const bomb = this.BOMB;\r\n    const totalBomb = await bbombBomb.totalBalance();\r\n    //  const borrowBomb = await bbombBomb.totalBorrows();\r\n    // const totalSupplied = totalBomb + borrowBomb;\r\n    return totalBomb;\r\n  }\r\n\r\n  async getTotalSuppliedBtcb(): Promise<BigNumber> {\r\n    const bbombBomb = this.BTCB_BORROWABLE;\r\n    // const bomb = this.BOMB;\r\n    const totalBtcb = await bbombBomb.totalBalance();\r\n    //const borrowBtcb = await bbombBomb.totalBorrows();\r\n    //  const totalSupplied = totalBtcb + borrowBtcb;\r\n    return totalBtcb;\r\n  }\r\n\r\n  async getXbombExchange(): Promise<BigNumber> {\r\n    const Xbomb = this.contracts.xBOMB;\r\n    const XbombExchange = await Xbomb.getExchangeRate();\r\n\r\n    const xBombPerBomb = parseFloat(XbombExchange) / 1000000000000000000;\r\n    const xBombRate = xBombPerBomb.toString();\r\n    return parseUnits(xBombRate, 18);\r\n  }\r\n\r\n  async withdrawFromBomb(amount: string): Promise<TransactionResponse> {\r\n    const Xbomb = this.contracts.xBOMB;\r\n    return await Xbomb.leave(decimalToBalance(amount));\r\n  }\r\n\r\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\r\n    const Boardroom = this.currentBoardroom();\r\n    if (this.boardroomVersionOfUser === 'v1') {\r\n      return await Boardroom.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Boardroom.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\r\n    const Boardroom = this.currentBoardroom();\r\n    return await Boardroom.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\r\n    const Boardroom = this.currentBoardroom();\r\n    if (this.boardroomVersionOfUser === 'v1') {\r\n      return await Boardroom.claimDividends();\r\n    }\r\n    return await Boardroom.claimReward();\r\n  }\r\n\r\n  async exitFromBoardroom(): Promise<TransactionResponse> {\r\n    const Boardroom = this.currentBoardroom();\r\n    return await Boardroom.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the boardroom\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Boardroom, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Boardroom.epoch();\r\n    const mason = await Boardroom.members(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the boardroom\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Boardroom, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\r\n    const currentEpoch = await Boardroom.epoch();\r\n    const mason = await Boardroom.members(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const { ethereum } = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'BOMB') {\r\n        asset = this.BOMB;\r\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png';\r\n      } else if (assetName === 'BSHARE') {\r\n        asset = this.BSHARE;\r\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bshare-512.png';\r\n      } else if (assetName === 'BBOND') {\r\n        asset = this.BBOND;\r\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bbond-512.png';\r\n      } else if (assetName === 'XBOMB') {\r\n        asset = this.XBOMB;\r\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/xbomb-512.png';\r\n      } else if (assetName === 'BTCB') {\r\n        asset = this.BTC;\r\n        assetUrl = 'https://bscscan.com/token/images/btcb_32.png';\r\n      }\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: assetUrl,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async provideBombFtmLP(ftmAmount: string, bombAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { TaxOffice } = this.contracts;\r\n    let overrides = {\r\n      value: parseUnits(ftmAmount, 18),\r\n    };\r\n    return await TaxOffice.addLiquidityETHTaxFree(\r\n      bombAmount,\r\n      bombAmount.mul(992).div(1000),\r\n      parseUnits(ftmAmount, 18).mul(992).div(1000),\r\n      overrides,\r\n    );\r\n  }\r\n\r\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\r\n    const { SpookyRouter } = this.contracts;\r\n    const { _reserve0, _reserve1 } = await this.BOMBBTCB_LP.getReserves();\r\n    let quote;\r\n    if (tokenName === 'BOMB') {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\r\n    } else {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\r\n    }\r\n    return (quote / 1e18).toString();\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\r\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\r\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\r\n\r\n    let epochBlocksRanges: any[] = [];\r\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\r\n    var events: any[] = [];\r\n    boardroomFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\r\n      if (index === 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n      }\r\n      if (index > 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\r\n      }\r\n    });\r\n\r\n    epochBlocksRanges.forEach(async (value, index) => {\r\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\r\n        boughtBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\r\n        redeemBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Helper method\r\n   * @param filter applied on the query to the treasury events\r\n   * @param from block number\r\n   * @param to block number\r\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\r\n   */\r\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\r\n    const { Treasury } = this.contracts;\r\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\r\n    return bondsAmount.length;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === BNB_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === BNB_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n  async swapBBondToBShare(bbondAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { BShareSwapper } = this.contracts;\r\n    return await BShareSwapper.swapBBondToBShare(bbondAmount);\r\n  }\r\n  async estimateAmountOfBShare(bbondAmount: string): Promise<string> {\r\n    const { BShareSwapper } = this.contracts;\r\n    try {\r\n      const estimateBN = await BShareSwapper.estimateAmountOfBShare(parseUnits(bbondAmount, 18));\r\n      return getDisplayBalance(estimateBN, 18, 6);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch estimate bshare amount: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getBShareSwapperStat(address: string): Promise<BShareSwapperStat> {\r\n    const { BShareSwapper } = this.contracts;\r\n    const bshareBalanceBN = await BShareSwapper.getBShareBalance();\r\n    const bbondBalanceBN = await BShareSwapper.getBBondBalance(address);\r\n    // const bombPriceBN = await BShareSwapper.getBombPrice();\r\n    // const bsharePriceBN = await BShareSwapper.getBSharePrice();\r\n    const rateBSharePerBombBN = await BShareSwapper.getBShareAmountPerBomb();\r\n    const bshareBalance = getDisplayBalance(bshareBalanceBN, 18, 5);\r\n    const bbondBalance = getDisplayBalance(bbondBalanceBN, 18, 5);\r\n    return {\r\n      bshareBalance: bshareBalance.toString(),\r\n      bbondBalance: bbondBalance.toString(),\r\n      // bombPrice: bombPriceBN.toString(),\r\n      // bsharePrice: bsharePriceBN.toString(),\r\n      rateBSharePerBomb: rateBSharePerBombBN.toString(),\r\n    };\r\n  }\r\n}\r\n","import React, {createContext, useEffect, useState} from 'react';\r\nimport {useWallet} from 'use-wallet';\r\nimport BombFinance from '../../bomb-finance';\r\nimport config from '../../config';\r\n\r\nexport interface BombFinanceContext {\r\n  bombFinance?: BombFinance;\r\n}\r\n\r\nexport const Context = createContext<BombFinanceContext>({bombFinance: null});\r\n\r\nexport const BombFinanceProvider: React.FC = ({children}) => {\r\n  const {ethereum, account} = useWallet();\r\n  const [bombFinance, setBombFinance] = useState<BombFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!bombFinance) {\r\n      const bomb = new BombFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        bomb.unlockWallet(ethereum, account);\r\n      }\r\n      setBombFinance(bomb);\r\n    } else if (account) {\r\n      bombFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, bombFinance]);\r\n\r\n  return <Context.Provider value={{bombFinance}}>{children}</Context.Provider>;\r\n};\r\n","import {BigNumber} from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","import {useContext} from 'react';\r\nimport {Context} from '../contexts/BombFinanceProvider';\r\n\r\nconst useBombFinance = () => {\r\n  const {bombFinance} = useContext(Context);\r\n  return bombFinance;\r\n};\r\n\r\nexport default useBombFinance;\r\n","import {createContext} from 'react';\r\nimport {Bank} from '../../bomb-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Context from './context';\r\nimport useBombFinance from '../../hooks/useBombFinance';\r\nimport {Bank} from '../../bomb-finance';\r\nimport config, {bankDefinitions} from '../../config';\r\n\r\nconst Banks: React.FC = ({children}) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const bombFinance = useBombFinance();\r\n  const isUnlocked = bombFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!bombFinance.isUnlocked) continue;\r\n\r\n        // only show pools staked by user\r\n        const balance = await bombFinance.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          bombFinance.myAccount,\r\n        );\r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE,\r\n      });\r\n    }\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [bombFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (bombFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, bombFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","import { Configuration } from './bomb-finance/config';\r\nimport { BankInfo } from './bomb-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  // development: {\r\n  //   chainId: 97,\r\n  //   networkName: 'BSC Testnet',\r\n  //   ftmscanUrl: 'https://testnet.bscscan.com/',\r\n  //   defaultProvider: 'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n  //   deployments: require('./bomb-finance/deployments/deployments.testing.json'),\r\n  //   externalTokens: {\r\n  //     WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\r\n  //     FUSDT: ['0x55d398326f99059fF775485246999027B3197955', 18], // This is actually BUSD on mainnet not fusdt\r\n  //     BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\r\n  //     ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\r\n  //     SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\r\n  //     'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\r\n  //     'BOMB-BTCB-LP': ['0x2A651563C9d3Af67aE0388a5c8F89b867038089e', 18],\r\n  //     'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\r\n  //   },\r\n  //   baseLaunchDate: new Date('2021-11-21 1:00:00Z'),\r\n  //   bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n  //   boardroomLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n  //   refreshInterval: 10000,\r\n  // },\r\n  development: {\r\n    chainId: 56,\r\n    networkName: 'BSC Mainnet',\r\n    ftmscanUrl: 'https://bscscan.com',\r\n    defaultProvider: 'https://bsc-dataseed.binance.org/',\r\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\r\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\r\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\r\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\r\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\r\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\r\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\r\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\r\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\r\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\r\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\r\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\r\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\r\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\r\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\r\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\r\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\r\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\r\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  production: {\r\n    chainId: 56,\r\n    networkName: 'BSC Mainnet',\r\n    ftmscanUrl: 'https://bscscan.com',\r\n    defaultProvider: 'https://bsc-dataseed.binance.org/',\r\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\r\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\r\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\r\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\r\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\r\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\r\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\r\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\r\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\r\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\r\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\r\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\r\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\r\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\r\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\r\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\r\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\r\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\r\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\r\n        - 0 = Single asset stake pools\r\n        - 1 = LP asset staking rewarding BOMB\r\n        - 2 = LP asset staking rewarding BSHARE\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  // BombBTCApeLPBombRewardPool: {\r\n  //   name: 'Earn BOMB by BOMB-BTCB Ape LP',\r\n  //   poolId: 2,\r\n  //   sectionInUI: 1,\r\n  //   contract: 'BombBTCApeLPBombRewardPool',\r\n  //   depositTokenName: 'BOMB-BTCB-APELP',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 2,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombBTCLPBombRewardPool: {\r\n  //   name: 'Earn BOMB by BOMB-BTC LP',\r\n  //   poolId: 0,\r\n  //   sectionInUI: 1,\r\n  //   contract: 'BombBTCLPBombRewardPool',\r\n  //   depositTokenName: 'BOMB-BTCB-LP',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 7,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombCakeRewardPool: {\r\n  //   name: 'Earn BOMB by CAKE',\r\n  //   poolId: 0,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'BombCAKERewardPool',\r\n  //   depositTokenName: 'CAKE',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 3,\r\n  //   closedForStaking: true,\r\n  // },\r\n  BombSBTCRewardPool: {\r\n    name: 'Earn BOMB by SBTC',\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'BombSBTCRewardPool',\r\n    depositTokenName: 'SBTC',\r\n    earnTokenName: 'BOMB',\r\n    finished: true,\r\n    sort: 4,\r\n    closedForStaking: true,\r\n  },\r\n  BombSUSDRewardPool: {\r\n    name: 'Earn BOMB by SUSD',\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'BombSUSDRewardPool',\r\n    depositTokenName: 'SUSD',\r\n    earnTokenName: 'BOMB',\r\n    finished: true,\r\n    sort: 5,\r\n    closedForStaking: true,\r\n  },\r\n  // BombSVLRewardPool: {\r\n  //   name: 'Earn BOMB by SVL',\r\n  //   poolId: 3,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'BombSVLRewardPool',\r\n  //   depositTokenName: 'SVL',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 6,\r\n  //   closedForStaking: true,\r\n  // },\r\n\r\n  // BombWBNBGenesisRewardPool: {\r\n  //   name: 'Earn BOMB by WBNB',\r\n  //   poolId: 4,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'BombWBNBGenesisRewardPool',\r\n  //   depositTokenName: 'WBNB',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 1,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombBnbLPRewardPool: {\r\n  //   name: 'Earn BOMB by BOMB-BNB LP',\r\n  //   poolId: 1,\r\n  //   sectionInUI: 1,\r\n  //   contract: 'BombBnbLPRewardPool',\r\n  //   depositTokenName: 'BOMB-BNB-LP',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: false,\r\n  //   sort: 8,\r\n  //   closedForStaking: false,\r\n  // },\r\n  // BombShibaRewardPool: {\r\n  //   name: 'Earn BOMB by SHIBA',\r\n  //   poolId: 2,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'BombShibaGenesisRewardPool',\r\n  //   depositTokenName: 'SHIBA',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: false,\r\n  //   sort: 3,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombZooRewardPool: {\r\n  //   name: 'Earn BOMB by ZOO',\r\n  //   poolId: 3,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'BombZooGenesisRewardPool',\r\n  //   depositTokenName: 'ZOO',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: false,\r\n  //   sort: 4,\r\n  //   closedForStaking: true,\r\n  // },\r\n\r\n  // BombFtmLPBombRewardPoolOld: {\r\n  //   name: 'Earn BOMB by BOMB-BNB LP',\r\n  //   poolId: 0,\r\n  //   sectionInUI: 1,\r\n  //   contract: 'BombFtmLpBombRewardPoolOld',\r\n  //   depositTokenName: 'BOMB-BNB-LP',\r\n  //   earnTokenName: 'BOMB',\r\n  //   finished: true,\r\n  //   sort: 9,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombFtmLPBShareRewardPool: {\r\n  //   name: 'Earn BSHARE by BOMB-BNB LP',\r\n  //   poolId: 0,\r\n  //   sectionInUI: 2,\r\n  //   contract: 'BombFtmLPBShareRewardPool',\r\n  //   depositTokenName: 'BOMB-BNB-LP',\r\n  //   earnTokenName: 'BSHARE',\r\n  //   finished: false,\r\n  //   sort: 6,\r\n  //   closedForStaking: false,\r\n  // },\r\n\r\n  // BshareBnbLPApeBShareRewardPool: {\r\n  //   name: 'Earn BSHARE by BSHARE-BNB LP',\r\n  //   poolId: 2,\r\n  //   sectionInUI: 2,\r\n  //   contract: 'BshareBnbLPApeBShareRewardPool',\r\n  //   depositTokenName: 'BSHARE-BNB-LP',\r\n  //   earnTokenName: 'BSHARE',\r\n  //   finished: false,\r\n  //   sort: 7,\r\n  //   closedForStaking: false,\r\n  // },\r\n  // BombBtcbLPApeBShareRewardPool: {\r\n  //   name: 'Earn BSHARE by BOMB-BTCB LP',\r\n  //   poolId: 3,\r\n  //   sectionInUI: 2,\r\n  //   contract: 'BombBtcbLPApeBShareRewardPool',\r\n  //   depositTokenName: 'BOMB-BTCB-LP',\r\n  //   earnTokenName: 'BSHARE',\r\n  //   finished: false,\r\n  //   sort: 7,\r\n  //   closedForStaking: false,\r\n  // },\r\n  // BshareBnbApeLPBShareRewardPool: {\r\n  //   name: 'Earn BSHARE by BSHARE-BNB Ape LP',\r\n  //   poolId: 2,\r\n  //   sectionInUI: 1,\r\n  //   contract: 'BshareBnbApeLPBShareRewardPool',\r\n  //   depositTokenName: 'BSHARE-BNB-APELP',\r\n  //   earnTokenName: 'BSHARE',\r\n  //   finished: true,\r\n  //   sort: 5,\r\n  //   closedForStaking: true,\r\n  // },\r\n  // BombBtcbApeLPBShareRewardPool: {\r\n  //   name: 'Earn BSHARE by BOMB-BTCB Ape LP',\r\n  //   poolId: 3,\r\n  //   sectionInUI: 2,\r\n  //   contract: 'BombBtcbApeLPBShareRewardPool',\r\n  //   depositTokenName: 'BOMB-BTCB-APELP',\r\n  //   earnTokenName: 'BSHARE',\r\n  //   finished: true,\r\n  //   sort: 4,\r\n  //   closedForStaking: true,\r\n  // },\r\n  BshareBnbLPBShareRewardPool: {\r\n    name: 'Earn BSHARE by BSHARE-BNB LP',\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'BshareBnbLPBShareRewardPool',\r\n    depositTokenName: 'BSHARE-BNB-LP',\r\n    earnTokenName: 'BSHARE',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n  },\r\n  BombBtcbLPBShareRewardPool: {\r\n    name: 'Earn BSHARE by BOMB-BTCB LP',\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'BombBtcbLPBShareRewardPool',\r\n    depositTokenName: 'BOMB-BTCB-LP',\r\n    earnTokenName: 'BSHARE',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  },\r\n  BombBshareLPBShareRewardPool: {\r\n    name: 'Earn BSHARE by BOMB-BSHARE LP',\r\n    poolId: 4,\r\n    sectionInUI: 2,\r\n    contract: 'BombBshareLPBShareRewardPool',\r\n    depositTokenName: 'BOMB-BSHARE-LP',\r\n    earnTokenName: 'BSHARE',\r\n    finished: false,\r\n    sort: 4,\r\n    closedForStaking: false,\r\n  },\r\n};\r\n\r\nexport default configurations[process.env.NODE_ENV || 'development'];\r\n","import React, {createContext, useCallback, useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({children}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nconst FAST_INTERVAL = 10000;\r\nconst SLOW_INTERVAL = 60000;\r\n\r\nexport const RefreshContext = React.createContext({slow: 0, fast: 0});\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nexport const RefreshContextProvider: React.FC = ({children}) => {\r\n  const [slow, setSlow] = useState(0);\r\n  const [fast, setFast] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1);\r\n    }, FAST_INTERVAL);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1);\r\n    }, SLOW_INTERVAL);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return <RefreshContext.Provider value={{slow, fast}}>{children}</RefreshContext.Provider>;\r\n};\r\n","import {createAction} from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{chainId: number; blockNumber: number}>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{key: string}>('app/removePopup');\r\n","import {Deployments} from './deployments';\r\nimport {ChainId} from '@pancakeswap/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: {[contractName: string]: [string, number]};\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  boardroomLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 3,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '7000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport {defaultEthereumConfig, EthereumConfig} from './config';\r\nimport {formatUnits, parseUnits} from 'ethers/lib/utils';\r\nimport {BigNumber} from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import {useEffect, useState} from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const {ethereum} = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'BNB',\r\n            symbol: 'BNB',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: {tokenAddress: string; spender: string};\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, {payload: {chainId, from, hash, approval, summary}}) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = {hash, approval, summary, from, addedTime: now()};\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, {payload: {chainId, hash, blockNumber}}) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\r\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu, updateBlockNumber} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: {[chainId: number]: number};\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const {chainId, blockNumber} = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, {payload: {key}}) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport {save, load} from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({thunk: false}), save({states: PERSISTED_KEYS})],\r\n  preloadedState: load({states: PERSISTED_KEYS}),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const yellow = {\r\n  200: '#ffdb4d',\r\n  400: '#ab47bc',\r\n  700: '#e6b800',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#9090FF',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n\r\nexport const newNavy = {\r\n  200: '171923',\r\n};\r\n","import {black, teal, grey, red, white, yellow, newNavy} from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 13,\r\n  color: {\r\n    black,\r\n    grey,\r\n    yellow,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: teal[200],\r\n    },\r\n    white,\r\n    teal,\r\n    newNavy,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createTheme } from '@material-ui/core/styles';\r\n\r\nconst newTheme = createTheme({\r\n  palette: {\r\n    type: 'light',\r\n    text: {\r\n      primary: '#dddfee',\r\n      secondary: 'white',\r\n      yellow: '#f9d749',\r\n    },\r\n    background: {\r\n      default: '#121212',\r\n      paper: '#171923',\r\n    },\r\n    primary: {\r\n      light: '#ffe066',\r\n      main: '#2c2560',\r\n      dark: '#b38f00',\r\n      contrastText: '#000',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#CDCDCD',\r\n      active: '#000',\r\n      hover: '#fff',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#2c2560',\r\n    fontFamily: ['\"Rubik\"', 'sans-serif'].join(','),\r\n  },\r\n});\r\n\r\nexport default newTheme;\r\n","import {useCallback, useEffect, useState} from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useWallet} from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport {updateBlockNumber} from './actions';\r\nimport {getDefaultProvider} from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const {ethereum, chainId} = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return {chainId, blockNumber};\r\n          return {chainId, blockNumber: Math.max(blockNumber, state.blockNumber)};\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({chainId, blockNumber: null});\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import {useEffect, useState} from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useWallet} from 'use-wallet';\r\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\r\nimport {AppDispatch, AppState} from '../index';\r\nimport {checkedTransaction, finalizeTransaction} from './actions';\r\nimport {getDefaultProvider} from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const {chainId, ethereum} = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        color: 'white',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, {useContext} from 'react';\r\nimport {AlertCircle, CheckCircle} from 'react-feather';\r\nimport styled, {ThemeContext} from 'styled-components';\r\nimport {useWallet} from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const {chainId} = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{paddingRight: 16}}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on BSCscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, {useCallback} from 'react';\r\nimport {AlertCircle} from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({message, stack}: {message: string; stack: string}) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{paddingRight: 16}}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, {useCallback, useContext, useEffect} from 'react';\r\nimport {X} from 'react-feather';\r\nimport {useSpring} from 'react-spring/web';\r\nimport styled, {ThemeContext} from 'styled-components';\r\nimport {animated} from 'react-spring';\r\nimport {PopupContent} from '../../state/application/actions';\r\nimport {useRemovePopup} from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({theme}) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({theme}) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: {hash, success, summary},\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: {message, stack},\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: {width: '100%'},\r\n    to: {width: '0%'},\r\n    config: {duration: removeAfterMs ?? undefined},\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useActivePopups} from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{height: string | number}>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({height}) => height};\r\n  margin: ${({height}) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({height}) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, {Suspense, lazy} from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {ThemeProvider as TP} from '@material-ui/core/styles';\r\nimport {ThemeProvider as TP1} from 'styled-components';\r\nimport {UseWalletProvider} from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport BombFinanceProvider from './contexts/BombFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\n//import Regulations from './views/Regulations/Regulations';\r\nimport {RefreshContextProvider} from './contexts/RefreshContext';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst DashBoard = lazy(() => import('./views/Dashboard'));\r\nconst Farm = lazy(() => import('./views/Farm'));\r\nconst Boardroom = lazy(() => import('./views/Boardroom'));\r\nconst Bond = lazy(() => import('./views/Bond'));\r\nconst Xbomb = lazy(() => import('./views/Stake'));\r\nconst Supply = lazy(() => import('./views/Supply'));\r\n// const SBS = lazy(() => import('./views/Sbs'));\r\n// const Liquidity = lazy(() => import('./views/Liquidity'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.1');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <Router>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route exact path=\"/dashboard\">\r\n              <DashBoard />\r\n            </Route>\r\n            <Route path=\"/farm\">\r\n              <Farm />\r\n            </Route>\r\n            <Route path=\"/boardroom\">\r\n              <Boardroom />\r\n            </Route>\r\n            <Route path=\"/bond\">\r\n              <Bond />\r\n            </Route>\r\n            <Route path=\"/xbomb\">\r\n              <Xbomb />\r\n            </Route>\r\n            <Route path=\"/supply\">\r\n              <Supply />\r\n            </Route>\r\n            {/* <Route path=\"/sbs\">\r\n              <SBS />\r\n            </Route> */}\r\n            {/* <Route path=\"/regulations\">\r\n              <Regulations />\r\n            </Route> */}\r\n            {/* <Route path=\"/liquidity\">\r\n              <Liquidity />\r\n            </Route> */}\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({children}) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n                    chainId={config.chainId}\r\n\r\n          connectors={{\r\n            walletconnect: {rpcUrl: config.defaultProvider},\r\n            walletlink: {\r\n              url: config.defaultProvider,\r\n              appName: 'bomb.money',\r\n              appLogoUrl: 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png',\r\n            },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <RefreshContextProvider>\r\n              <BombFinanceProvider>\r\n                <ModalsProvider>\r\n                  <BanksProvider>\r\n                    <>\r\n                      <Popups />\r\n                      {children}\r\n                    </>\r\n                  </BanksProvider>\r\n                </ModalsProvider>\r\n              </BombFinanceProvider>\r\n            </RefreshContextProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const BOMB_TICKER = 'BOMB';\r\nexport const BSHARE_TICKER = 'BSHARE';\r\nexport const BBOND_TICKER = 'BBOND';\r\nexport const BNB_TICKER = 'BNB';\r\nexport const WBNB_TICKER = 'WBNB';\r\nexport const BTC_TICKER = 'BTCB';\r\n\r\nexport const SPOOKY_ROUTER_ADDR = '0x10ED43C718714eb63d5aA57B78B54704E256024E';\r\nexport const ZAPPER_ROUTER_ADDR = '0xA0C5F779e52A8D9a81aF17Dd910577946B6810F6';\r\nexport const TAX_OFFICE_ADDR = '0x2A637BEE0D76136d8ee44B96cf0A5f9198657AaF';\r\n","import {createAction} from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\nimport {ChainId} from '@pancakeswap/sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: {tokenAddress: string; spender: string};\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{chainId: ChainId}>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n"],"sourceRoot":""}