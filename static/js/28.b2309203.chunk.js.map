{"version":3,"sources":["../../src/index.ts"],"names":["TorusConnector","chainId","initOptions","_ref$initOptions","constructorOptions","_ref$constructorOptio","loginOptions","_ref$loginOptions","_this","supportedChainIds","_inheritsLoose","_proto","activate","_this3","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","getChainId","getAccount","ethereum","request","method","deactivate","close","_this11","cleanUp","undefined","emitDeactivate","AbstractConnector","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","Deactivate","EventEmitter"],"mappings":"8QAUaA,EAAb,Y,QAQI,SAAF,K,MAAcC,Y,IAASC,yBAAc,GAAAC,E,IAAIC,gCAAqB,GAAAC,E,IAAIC,0BAAe,GAAAC,E,OAC/EC,cAAM,CAAEC,kBAAmB,CAACR,MAA5B,MAEKA,QAAUA,EACfO,EAAKN,YAAcA,EACnBM,EAAKJ,mBAAqBA,EAC1BI,EAAKF,aAAeA,E,IAdxBI,G,EAAAA,G,sEAAA,yBAAAC,EAiBeC,SAjBf,e,MAkBS,K,oCAMiBC,EAAKC,MAAMC,MAAMF,EAAKP,cAAcU,MAAK,SAACC,GAAD,OAAgCA,EAAS,OAAlF,eAAhBC,GAEN,MAAO,CAAEC,SAAUN,EAAKC,MAAMK,SAAUD,e,iBARnCL,EAAKC,M,uBACY,uDAAiCE,MAAK,YAAC,4BAAII,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,MAAzD,eAAdC,G,OACNR,EAAKC,MAAQ,IAAIO,EAAMR,EAAKT,oB,gBACtBS,EAAKC,MAAMQ,KAAKT,EAAKX,cAArB,wB,mDArBZ,oCAAAS,EA6BeY,YA7Bf,eA8BI,uBAAO,KAAKT,MAAMK,UA9BtB,oCAAAR,EAiCea,WAjCf,eAkCI,uBAAO,KAAKvB,SAlChB,oCAAAU,EAqCec,WArCf,eAsCI,uBAAO,KAAKX,MAAMY,SAASC,QAAQ,CAAEC,OAAQ,iBAAkBZ,MAAK,SAACC,GAAD,OAAgCA,EAAS,OAtCjH,oCAAAN,EAyCekB,WAzCf,W,0BAAAlB,EA2CemB,MA3Cf,e,MA4CU,K,uBAAAC,EAAKjB,MAAMkB,WAAX,iBACND,EAAKjB,WAAQmB,EACbF,EAAKG,oBA9CT,uC,OAAoCC,I,2FAPdA,EAAtB,Y,4BAGgB1B,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjB2B,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,I,EAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,I,EAGxBR,0B,KAIHI,KAAKC,IAAeK,a,EAhC7B,CAAgDC","file":"static/js/28.b2309203.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}